best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==state,]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
if (num=="best") num = 1
if (num=='worst') num = nrow(sorted.data.state)
#will automatically return NA if num > nrow, as well as if it's some other text value
# if someone passes num < 1, they'll get what's expected
#if (is.numeric(num) & num > nrwo(sorted.data.state) return(NA)
sorted.data.state[num,"Hospital.Name"]
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("./ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
data.frame(hospital, state)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
> hist(outcome[, 11])
class(xyplot)
class("xyplot")
?xyplot
??xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel.lmline
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print
p
library(datasets)
data(airquality)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(votes, rating, data = movies)
library(datasets)
qplot(votes, rating, data = movies)
ls()
library(ggplot2)
library(datasets)
data(movies)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
ymd("1988-05-17")
my_date <- ymd("1988-05-17")
my_date <- ymd("1989-05-17")
my_date
bye()
0
ibrary(dplyr)
library(dplyr)
setwd("~/Coursera/Getting and Cleaning Data/week 4")
dat <- read.csv("getdata_data_ss06hid.csv")
head(dat)
names(dat)
list <-strsplit(names(dat),split="wgtp")
list[[123]]
gdp <- read.csv("getdata_data_GDP.csv")
head(gdp)
gdp$X.4
gdp$Gross.domestic.product.2012
gdp$X.2
gdp$X.1
gdp$X
data <- read.csv("./data/gdp.csv",skip=4, nrows=190)
cleanedData <- gsub(",","",data$X.4)
cleanedData <- (as.numeric(cleanedData))
mean(cleanedData,na.rm = TRUE)
data <- read.csv("getdata_data_GDP.csv",skip=4, nrows=190)
cleanedData <- gsub(",","",data$X.4)
cleanedData <- (as.numeric(cleanedData))
mean(cleanedData,na.rm = TRUE)
countryNames <- data$X.3
length(grep("^United",countryNames))
list[[123]]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
dim(sampleTimes)
nrow(sampleTimes)
pnorm(70, mean = 80, sd = 10)
swirl()
install_from_swirl("Statistical_Inference")
swirl()
dice_sqr
ex2_faie <- dice_fair * PDF
ex2_faie <- sum(dice_fair * dice_sqr)
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5^2
sum(dice_high * dice_sqr)-edh^2
bye()
volume <- round(qnorm(quantile, mean = 1100, sd = 75))
volume <- round(qnorm(quantile, mean = μ, sd = σ))
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75/sqrt(100))
pnorm(70, mean = 80, sd = 10)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75/sqrt(100))
pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE)
pnorm(16, mean = 15, sd = 1) - pnorm(14, mean = 15, sd = 1)
ppois(10, lambda = 15
)
pnorm(16, mean = 15, sd = 10) - pnorm(14, mean = 15, sd = 10)
install_from_swirl("Regression Models")
swirl()
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
plot(child ~ parent,galton)
plot(jitter(child,4) ~ parent,galton)
regline <- lm(child ~ parent,galton)
regrline <- lm(child ~ parent,galton)
abline(regrline,lwd = 3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
bye()
swirl()
ols.ic <-fit$coefficients[1]
ols.ic <-fit$coef[1]
ols.slope <- fit$coef[2]
rhs -lhs
lhs-rhs
all.equal((lhs,rhs))
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
bye()
x <- c(0.18,-1.54,0.42,0.95)
w <- c(2,1,3,1)
sum(x * w)/sum(w)
x <- c(0.18,-1.54,0.42,0.95)
w <- c(2,1,3,1)
mu <- sum(x * w)/sum(w)
final <- sum(w * (x - mu )^2)
c(mu,final)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(x,x*-1)
y <- c(y,y*-1)
mean(y)
plot(x,y)
cor(x,y) *sd(y)/sd(x)
swirl()
varEst <- est(ols.slope,ols.ic)
varEst <- var(est(ols.slope,ols.ic))
all.equal(lhs,rhs)
all.equal(varChild, varEst+varRes)
efit <- lm(acel ~ mag+dist,attenu)
efit <- lm(accel ~ mag+dist,attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(ylab ~ xlab)
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.18,-1.54,0.42,0.95)
w <- c(2,1,3,1)
mu <- sum(x * w)/sum(w)
final <- sum(w * (x - mu )^2)
c(mu,final)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(x,x*-1)
y <- c(y,y*-1)
mean(y)
plot(x,y)
cor(x,y) *sd(y)/sd(x)
data("mtcars")
x <- mtcars$wt
y <- mtcars$mpg
cor(x,y) * sd(y)/sd(x)
sx <- 1/2
sy <- 1
cor <- .5
cor * sy/sx
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
zx <- (x - mean(x)) / sd(x)
zx[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(y,x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(y,x)
b1 <- cor(x,y) * sd(y) / sd(x)
b0 <- mean(y) - b1 * mean(x)
b0
b1 <- 1000000000
b0 <- 0 - b1 * 0
b0
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
ls()
rm(ls())
rm(ls)
rm(list = ls())
ls()
setwd("C:/Users/Yogamaya/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
head(data)
steps_taken_per_day <- aggregate(steps ~ date, dta,sum)$steps
hist(steps_taken_per_day)
steps_taken_per_day <- aggregate(steps ~ date, data,sum)$steps
hist(steps_taken_per_day)
mean_of_steps_taken_per_date <- mean(step_taken_per_day)
mean_of_steps_taken_per_date <- mean(steps_taken_per_day)
median_of_steps_taken_per_day <- median(steps_taken_per_day)
steps_average_daily <- aggregrate(steps ~ interval, data,mean)
plot(steps_average_daily$steps, type = "1")
steps_average_daily <- aggregrate(steps ~ interval, data,mean)
steps_average_daily <- aggregate(steps ~ interval, data,mean)
plot(steps_average_daily$steps, type = "1")
plot(steps_average_daily$steps, type = 1)
plot(steps_average_daily$steps, type = "l"")
plot(steps_average_daily$steps, type = "l")
plot(steps_average_daily$steps, type = "l")
Missing_Data <- is.na(data)
head(data)
Missing_Data <- data$steps = NA
Missing_Data <- data$steps == NA
nrow(Missing_Data)
length(Missing_Data)
Missing_Data <- subset(data, is.Na(steps)
Missing_Data <- subset(data, is.Na(steps)
Missing_Data <- subset(data, is.Na(steps))
Missing_Data <- subset(data, is.na(steps))
nrow(Missing_Data)
nrow(data)
head(steps_taken_per_day)
steps_taken_per_day <- aggregate(steps ~ date, data,sum,na.action = omit)$steps
steps_taken_per_day <- aggregate(steps ~ date, data,sum,na.action = 'omit')$steps
steps_per_day <- data %>%
group_by(Date, date) %>%
summarise(Steps_Per_Day = sum(steps)) %>%
steps_per_day <- data %>%
group_by(Date, date) %>%
summarise(Steps_Per_Day = sum(steps))
steps_per_day <- data %>%
group_by(date, date) %>%
summarise(Steps_Per_Day = sum(steps))
head(steps_per_day)
hist(steps_per_day)
hist(steps_per_day$Steps_Per_Day)
hist(steps_per_day$date)
hist(steps_per_day$Steps_Per_Day, main= "Steps Per Day", xlab = "Steps",col="Green")
hist(steps_per_day$Steps_Per_Day, main= "Steps Per Day", xlab = "Steps",col="Blue")
hist(steps_per_day$Steps_Per_Day, main= "Steps Per Day", xlab = "Steps",col="Green")
median(steps_per_day$Steps_Per_Day)
mean(steps_taken_per_day)
mean(steps_per_day$Steps_Per_Day,na.rm = TRUE)
median(steps_per_day$Steps_Per_Day,na.rm = TRUE)
average_steps_per_day <- data %>%
group_by(date, date) %>%
summarise(steps_Per_Day = mean(steps))
plot(average_steps_per_day$steps, type = "l")
average_steps_per_day <- data %>%
group_by(interval, interval) %>%
summarise(steps_Per_Day = mean(steps))
plot(average_steps_per_day$steps, type = "l")
head(average_steps_per_day)
plot(average_steps_per_day$interval, average_steps_per_day$steps_Per_Day, type = "l", main = "Average    Steps per Five Minute Interval", xlab = "Interval",ylab = "Steps")
average_steps_per_day <- data %>%
group_by(interval, interval) %>%
summarise(steps_Per_Day = mean(steps))
plot(average_steps_per_day$interval, average_steps_per_day$steps_Per_Day, type = "l", main = "Average    Steps per Five Minute Interval", xlab = "Interval",ylab = "Steps")
steps_average_daily <- aggregate(steps ~ interval, data,mean)
plot(steps_average_daily$steps, type = "l")
head(steps_average_daily)
average_steps_per_day <- data %>%
group_by(interval, interval) %>%
summarise(steps_Per_Day = sum(steps))
##average_steps_per_day <- subset(average_steps_per_day, !is.na(average_steps_per_day$steps_Per_Day))
plot(average_steps_per_day$interval, average_steps_per_day$steps_Per_Day, type = "l", main = "Average    Steps per Five Minute Interval", xlab = "Interval",ylab = "Steps", )
average_steps_per_day <- data %>%
group_by(interval, interval) %>%
summarise(steps_Per_Day = sum(steps))
head(average_steps_per_day)
average_steps_per_day <- data %>%
group_by(interval, interval) %>%
summarise(steps_per_interval = sum(steps))
head(average_steps_per_day)
average_steps_per_day <- data %>%
group_by(interval, interval) %>%
summarise(steps_per_interval = sum(steps,na.rm = TRUE))
head(average_steps_per_day)
data <- read.csv("activity.csv", header = TRUE, sep = ",")
data$date_revised <- as.Date(data$date)
data$interval_revised <- sprintf("%04d", data$interval)
data$interval_time <- strptime(data$interval_revised, format = "%H%M")```
data <- read.csv("activity.csv", header = TRUE, sep = ",")
data$date_revised <- as.Date(data$date)
data$interval_revised <- sprintf("%04d", data$interval)
data$interval_time <- strptime(data$interval_revised, format = "%H%M")
s_date <- split(data, data$date_revised)
total_steps <- sapply(s_date, function(x) sum(x$steps))
plot <- hist(total_steps, main = "Total steps per day", xlab ="total number of steps taken each day")
library(scales)
s_pattern <- split(data, data$interval_revised)
average_steps <- sapply(s_pattern, function(x) mean(x$steps, na.rm = TRUE))
day_pattern <- data.frame(time = data$interval_time[1:288], ave_steps = average_steps)
p_day <- ggplot(day_pattern, aes(x = time, y = ave_steps))
p_day+geom_line(colour = "tomato", size = .7)+labs(x = "interval", y = "Number of steps", title = "Average Daily Activity Pattern")+scale_x_datetime(labels= date_format("%H:%M"))
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
?help(package = lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12 1975")
dmy(25081985)
ymd("192012")
ymd("--192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now(tzone = ":America/New_York")
nyc <- now(":America/New_York")
nyc <- now("America/New_York")
nyc
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- update(depart, hours = 15, minutes = 50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive,"Asia/Hong_Kong")
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(hpw_long)
as.period(how_long)
stopwatch(0)
stopwatch()
head(data)
ls()
rm(list = ls)
rm(list = ls())
ls()
data <- read.csv("activity.csv", header = TRUE)
data$date = as.Date(data$date)
head(data)
class(data$date)
data$interval_time <- strptime(data$interval, format = "%H%M")
head(data)
